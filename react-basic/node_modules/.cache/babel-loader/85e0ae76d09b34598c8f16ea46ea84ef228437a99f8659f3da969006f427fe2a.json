{"ast":null,"code":"var _jsxFileName = \"D:\\\\GitHub\\\\Study_React\\\\react-basic\\\\src\\\\App.js\";\n// 組件狀態 類組件作為演示 (函數組件需要用到HOOK，等用到再說)\n\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass TestComponent extends React.Component {\n  constructor(...args) {\n    super(...args);\n    // 1.定義組件狀態\n    this.state = {\n      // 在這裡可以定義各種屬性 全都是當前狀態\n      name: 'Gusty'\n    };\n    this.changeName = () => {\n      // 3.修改state中的狀態name\n      // 注意: 不可以直接做賦值修改 必須通過一個方法setState\n      this.setState({\n        name: 'Father'\n      });\n    };\n  }\n  render() {\n    // 2.使用狀態\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"this is TestComponent\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 30\n      }, this), this.state.name, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.changeName,\n        children: \"\\u4FEE\\u6539name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n/**\r\n * 總結:\r\n * 1. 編寫組件狀態其實就是編寫原生js類或函數\r\n * 2. 定義狀態逼須通過state實例屬性的方法 提供一個對象 名稱是固定的 就叫做state\r\n * 3. 修改state中的任何屬性 都不可以直接賦值 必須用setState的方法 這個方法來自於繼承得到\r\n * 4. 這裡的this關鍵詞 很容易出現指向錯誤的問題 上面的寫法是最推薦和最規範的 沒有this指向問題\r\n * \r\n */\n\n// 根組件\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(TestComponent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","TestComponent","Component","constructor","args","state","name","changeName","setState","render","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","App","className","_c","$RefreshReg$"],"sources":["D:/GitHub/Study_React/react-basic/src/App.js"],"sourcesContent":["// 組件狀態 類組件作為演示 (函數組件需要用到HOOK，等用到再說)\r\n\r\nimport React from 'react'\r\n\r\nclass TestComponent extends React.Component {\r\n  // 1.定義組件狀態\r\n  state = {\r\n    // 在這裡可以定義各種屬性 全都是當前狀態\r\n    name: 'Gusty'\r\n  }\r\n\r\n  changeName = () => {\r\n    // 3.修改state中的狀態name\r\n    // 注意: 不可以直接做賦值修改 必須通過一個方法setState\r\n    this.setState({\r\n      name: 'Father'\r\n    })\r\n  }\r\n\r\n  render () {\r\n    // 2.使用狀態\r\n    return (\r\n      <div>\r\n        this is TestComponent<br />\r\n        {this.state.name}\r\n        <button onClick={this.changeName}>修改name</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * 總結:\r\n * 1. 編寫組件狀態其實就是編寫原生js類或函數\r\n * 2. 定義狀態逼須通過state實例屬性的方法 提供一個對象 名稱是固定的 就叫做state\r\n * 3. 修改state中的任何屬性 都不可以直接賦值 必須用setState的方法 這個方法來自於繼承得到\r\n * 4. 這裡的this關鍵詞 很容易出現指向錯誤的問題 上面的寫法是最推薦和最規範的 沒有this指向問題\r\n * \r\n */\r\n\r\n// 根組件\r\nfunction App () {\r\n  return (\r\n    <div className=\"App\">\r\n      <TestComponent />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n"],"mappings":";AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,aAAa,SAASH,KAAK,CAACI,SAAS,CAAC;EAAAC,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAC1C;IAAA,KACAC,KAAK,GAAG;MACN;MACAC,IAAI,EAAE;IACR,CAAC;IAAA,KAEDC,UAAU,GAAG,MAAM;MACjB;MACA;MACA,IAAI,CAACC,QAAQ,CAAC;QACZF,IAAI,EAAE;MACR,CAAC,CAAC;IACJ,CAAC;EAAA;EAEDG,MAAMA,CAAA,EAAI;IACR;IACA,oBACET,OAAA;MAAAU,QAAA,GAAK,uBACkB,eAAAV,OAAA;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,EAC1B,IAAI,CAACT,KAAK,CAACC,IAAI,eAChBN,OAAA;QAAQe,OAAO,EAAE,IAAI,CAACR,UAAW;QAAAG,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C,CAAC;EAEV;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAASE,GAAGA,CAAA,EAAI;EACd,oBACEhB,OAAA;IAAKiB,SAAS,EAAC,KAAK;IAAAP,QAAA,eAClBV,OAAA,CAACC,aAAa;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACd,CAAC;AAEV;AAACI,EAAA,GANQF,GAAG;AAQZ,eAAeA,GAAG;AAAA,IAAAE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}